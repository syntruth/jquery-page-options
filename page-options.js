// Generated by CoffeeScript 1.6.1
(function() {
  var PageOptions;

  PageOptions = (function() {

    function PageOptions(options) {
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.setup();
    }

    PageOptions.prototype.setup = function() {
      this.maxPages = this.options.maxPages || false;
      this.fields = this.options.fields || {};
      if (!this.fields.hasOwnProperty('page')) {
        this.fields.page = 1;
      }
      if (!this.fields.hasOwnProperty('per_page')) {
        this.fields.per_page = 15;
      }
      this._setupMethods();
      return this;
    };

    PageOptions.prototype.incrPage = function() {
      this.fields.page += 1;
      if (this.maxPages && this.fields.page >= this.maxPages) {
        this.fields.page = this.maxPages;
      }
      return this.fields.page;
    };

    PageOptions.prototype.decrPage = function() {
      this.fields.page -= 1;
      if (this.fields.page <= 0) {
        this.fields.page = 1;
      }
      return this.fields.page;
    };

    PageOptions.prototype.setPage = function(page) {
      if (page == null) {
        page = 1;
      }
      this.fields.page = page;
      if (this.fields.page <= 0) {
        this.fields.page = 1;
      }
      return this.fields.page;
    };

    PageOptions.prototype.set = function(field, value) {
      if (this.fields.hasOwnProperty(field)) {
        return this.fields[field] = value;
      }
    };

    PageOptions.prototype.get = function(field) {
      return this.fields[field];
    };

    PageOptions.prototype.setMaxPages = function(maxPages) {
      if (maxPages == null) {
        maxPages = Infinity;
      }
      return this.maxPages = maxPages;
    };

    PageOptions.prototype.isMaxPage = function() {
      if (this.fields.page === this.maxPages) {
        return true;
      } else {
        return false;
      }
    };

    PageOptions.prototype.current = function() {
      return $.extend({}, this.fields);
    };

    PageOptions.prototype.data = function(options) {
      var field, value;
      if (options == null) {
        options = {};
      }
      options = $.extend(this.current(), options);
      for (field in options) {
        value = options[field];
        if (!value) {
          delete options[field];
        }
      }
      return options;
    };

    PageOptions.prototype.reset = function() {
      this.setup();
      return this;
    };

    PageOptions.prototype.update = function(options) {
      if (options == null) {
        options = {};
      }
      this.options = $.extend(this.options, options);
      this.setup();
      return this;
    };

    PageOptions.prototype._setupMethods = function() {
      var field;
      for (field in this.fields) {
        this._setupSetMethod(field);
        this._setupGetMethod(field);
      }
    };

    PageOptions.prototype._setupSetMethod = function(field) {
      var _this = this;
      this["set_" + field] = function(value) {
        return _this.set(field, value);
      };
    };

    PageOptions.prototype._setupGetMethod = function(field) {
      var _this = this;
      this["" + field] = function() {
        return _this.get(field);
      };
    };

    return PageOptions;

  })();

}).call(this);
